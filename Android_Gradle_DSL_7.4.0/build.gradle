plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}

android {
    namespace 'com.angcyo.android_gradle_dsl_740'
    compileSdk 33

    defaultConfig {
        applicationId "com.angcyo.android_gradle_dsl_740"
        minSdk 24
        targetSdk 33
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        viewBinding true
    }

    sourceSets {
        def base = "/Users/angcyo/.gradle/wrapper/dists/gradle-7.5-all/6qsw290k5lz422uaf8jf6m7co/gradle-7.5/src"
        main.java.srcDirs += [
                "${base}/core",
                "${base}/core-api",
                "${base}/base-services",
                "${base}/base-services-groovy",
                "${base}/logging",
                "${base}/plugins",
                "${base}/diagnostics",
                "${base}/ide-native",
        ]
    }

    //输出gradle版本
    println gradle.gradleVersion

    //顶级类
    com.android.build.gradle.AbstractAppExtension
    com.android.build.gradle.internal.dsl.BaseAppModuleExtension
    com.android.build.gradle.BaseExtension

    variantFilter { variant ->
        def buildTypeName = variant.buildType*.name
        def flavorName = variant.flavors*.name
    }

    com.android.build.api.variant.AndroidComponentsExtension
    /*androidComponents {
        beforeVariants {
            println("Called with variant : ${'$'}name")
        }
    }*/
    androidComponents {
        println pluginVersion
        def debug = selector().withBuildType("debug")
        beforeVariants(debug) {
            println("Called with variant : ${'$'}name")
        }
    }

    com.android.build.gradle.internal.api.ApkVariantOutputImpl
    com.android.build.api.variant.impl.VariantOutputConfigurationImpl

    applicationVariants.all { variant ->
        println variant.class //class com.android.build.gradle.internal.api.ApplicationVariantImpl_Decorated
        com.android.build.gradle.internal.api.ApplicationVariantImpl //这个类点击才能跳转

        //修改输出路径↓
        variant.packageApplicationProvider
        variant.packageApplicationProvider.get().outputDirectory.getAsFile().get() //aab无效

        //修改输出文件名↓
        //apk的输出才会走这里, aab则不会
        variant.outputs.forEach {
            println it.class //class com.android.build.gradle.internal.api.ApkVariantOutputImpl_Decorated
            com.android.build.gradle.internal.api.ApkVariantOutputImpl //这个类点击才能跳转
        }
    }
}

dependencies {

    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.google.android.material:material:1.5.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.4.1'
    implementation 'androidx.navigation:navigation-ui-ktx:2.4.1'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    def gradle = "/Users/angcyo/.gradle/caches/modules-2/files-2.1/com.android.tools.build/gradle/7.4.0"
    implementation fileTree(dir: gradle, include: ["*.jar", "*\\*.jar"])

    def gradleApi = "/Users/angcyo/.gradle/caches/modules-2/files-2.1/com.android.tools.build/gradle-api/7.4.0"
    implementation fileTree(dir: gradleApi, include: ["*.jar", "*\\*.jar"])
}